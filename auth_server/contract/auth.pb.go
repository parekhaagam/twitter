// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authentication/auth.proto

package contract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type GetTokenRequest struct {
	Userid               string   `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenRequest) Reset()         { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()    {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_ab638197830aa8f5, []int{0}
}
func (m *GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenRequest.Unmarshal(m, b)
}
func (m *GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenRequest.Marshal(b, m, deterministic)
}
func (dst *GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenRequest.Merge(dst, src)
}
func (m *GetTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenRequest.Size(m)
}
func (m *GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenRequest proto.InternalMessageInfo

func (m *GetTokenRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// The response message containing the greetings
type GetTokenReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenReply) Reset()         { *m = GetTokenReply{} }
func (m *GetTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetTokenReply) ProtoMessage()    {}
func (*GetTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_ab638197830aa8f5, []int{1}
}
func (m *GetTokenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenReply.Unmarshal(m, b)
}
func (m *GetTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenReply.Marshal(b, m, deterministic)
}
func (dst *GetTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenReply.Merge(dst, src)
}
func (m *GetTokenReply) XXX_Size() int {
	return xxx_messageInfo_GetTokenReply.Size(m)
}
func (m *GetTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenReply proto.InternalMessageInfo

func (m *GetTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// The request message containing the user's name.
type AuthenticateRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticateRequest) Reset()         { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()    {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_ab638197830aa8f5, []int{2}
}
func (m *AuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateRequest.Unmarshal(m, b)
}
func (m *AuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateRequest.Marshal(b, m, deterministic)
}
func (dst *AuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateRequest.Merge(dst, src)
}
func (m *AuthenticateRequest) XXX_Size() int {
	return xxx_messageInfo_AuthenticateRequest.Size(m)
}
func (m *AuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateRequest proto.InternalMessageInfo

func (m *AuthenticateRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// The response message containing the greetings
type AuthenticateReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticateReply) Reset()         { *m = AuthenticateReply{} }
func (m *AuthenticateReply) String() string { return proto.CompactTextString(m) }
func (*AuthenticateReply) ProtoMessage()    {}
func (*AuthenticateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_ab638197830aa8f5, []int{3}
}
func (m *AuthenticateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateReply.Unmarshal(m, b)
}
func (m *AuthenticateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateReply.Marshal(b, m, deterministic)
}
func (dst *AuthenticateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateReply.Merge(dst, src)
}
func (m *AuthenticateReply) XXX_Size() int {
	return xxx_messageInfo_AuthenticateReply.Size(m)
}
func (m *AuthenticateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateReply.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateReply proto.InternalMessageInfo

func (m *AuthenticateReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*GetTokenRequest)(nil), "authentication.GetTokenRequest")
	proto.RegisterType((*GetTokenReply)(nil), "authentication.GetTokenReply")
	proto.RegisterType((*AuthenticateRequest)(nil), "authentication.AuthenticateRequest")
	proto.RegisterType((*AuthenticateReply)(nil), "authentication.AuthenticateReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	// Sends a greeting
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error)
	// Sends a greeting
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateReply, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := c.cc.Invoke(ctx, "/authentication.Auth/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateReply, error) {
	out := new(AuthenticateReply)
	err := c.cc.Invoke(ctx, "/authentication.Auth/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	// Sends a greeting
	GetToken(context.Context, *GetTokenRequest) (*GetTokenReply, error)
	// Sends a greeting
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateReply, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.Auth/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.Auth/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Auth_GetToken_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Auth_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication/auth.proto",
}

func init() { proto.RegisterFile("authentication/auth.proto", fileDescriptor_auth_ab638197830aa8f5) }

var fileDescriptor_auth_ab638197830aa8f5 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x2c, 0x2d, 0xc9,
	0x48, 0xcd, 0x2b, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x07, 0x71, 0xf5, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0xf8, 0x50, 0xa5, 0x94, 0x34, 0xb9, 0xf8, 0xdd, 0x53, 0x4b, 0x42, 0xf2,
	0xb3, 0x53, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0x4a, 0x8b,
	0x53, 0x8b, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x25, 0x55, 0x2e,
	0x5e, 0x84, 0xd2, 0x82, 0x9c, 0x4a, 0x21, 0x11, 0x2e, 0xd6, 0x12, 0x10, 0x0f, 0xaa, 0x0e, 0xc2,
	0x51, 0xd2, 0xe6, 0x12, 0x76, 0x44, 0xd8, 0x91, 0x0a, 0x33, 0x15, 0xbb, 0x62, 0x5d, 0x2e, 0x41,
	0x54, 0xc5, 0x20, 0x73, 0x25, 0xb8, 0xd8, 0x8b, 0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0xc1, 0x8a,
	0x39, 0x82, 0x60, 0x5c, 0xa3, 0x75, 0x8c, 0x5c, 0x2c, 0x20, 0xf5, 0x42, 0x3e, 0x5c, 0x1c, 0x30,
	0xb7, 0x08, 0xc9, 0xeb, 0xa1, 0xfa, 0x49, 0x0f, 0xcd, 0x43, 0x52, 0xb2, 0xb8, 0x15, 0x14, 0xe4,
	0x54, 0x2a, 0x31, 0x08, 0x45, 0x70, 0xf1, 0x20, 0xbb, 0x42, 0x48, 0x19, 0x5d, 0x03, 0x16, 0x0f,
	0x49, 0x29, 0xe2, 0x57, 0x04, 0x36, 0xd9, 0x49, 0x8f, 0x4b, 0x3e, 0x33, 0x5f, 0x2f, 0xbd, 0xa8,
	0x20, 0x59, 0x2f, 0xb5, 0x22, 0x31, 0xb7, 0x20, 0x27, 0xb5, 0x18, 0x4d, 0x9b, 0x13, 0x27, 0x48,
	0x5f, 0x00, 0x28, 0x72, 0x02, 0x18, 0x93, 0xd8, 0xc0, 0xb1, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x22, 0xed, 0xcb, 0x83, 0xc2, 0x01, 0x00, 0x00,
}
